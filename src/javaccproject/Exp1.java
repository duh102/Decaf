package javaccproject;

import java.io.StringReader;

/* Exp1.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Exp1.java */
public class Exp1/* @bgen(jjtree) */implements Exp1TreeConstants, Exp1Constants
{/*
  * @ bgen ( jjtree )
  */

    protected static JJTExp1State jjtree = new JJTExp1State();

    public static SymbolTable parse(String toParse) {
        SymbolTable symbolTable = new SymbolTable();
        try {
            new Exp1(new StringReader(toParse)).__Start(symbolTable);
            // debug: System.out.println("Syntax is okay");
            return symbolTable;
        } catch (ParseException e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.err.println("Syntax check failed: " + e.getMessage());
        }
        return null;
    }

    /*
     * _p denotes the ' character from the grammar all methods start with two
     * underscores to denote that they are methods as opposed to keywords
     * defined above.
     */
    final public void __Start(SymbolTable symbolTable) throws ParseException {/*
                                                                               * @
                                                                               * bgen
                                                                               * (
                                                                               * jjtree
                                                                               * )
                                                                               * __Start
                                                                               */
        SimpleNode jjtn000 = new SimpleNode(JJT__START);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_1: while (true) {
                __Class(symbolTable);
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case CLASS: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
            }
            jj_consume_token(0);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void __Class(SymbolTable symbolTable) throws ParseException {/*
                                                                               * @
                                                                               * bgen
                                                                               * (
                                                                               * jjtree
                                                                               * )
                                                                               * __Class
                                                                               */
        SimpleNode jjtn000 = new SimpleNode(JJT__CLASS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(CLASS);
            Token thisClass = new ClassToken(jj_consume_token(ID));
            symbolTable.setToken(thisClass);
            thisClass.containedIn = symbolTable;
            thisClass.myContext = new SymbolTable();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case EXTENDS: {
                    __Super((ClassToken)thisClass, symbolTable);
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    ;
            }
            jj_consume_token(L_CURL_BRACKET);
            label_2: while (true) {

                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case PRIVATE:
                    case PROTECTED:
                    case PUBLIC:
                    case STATIC:
                    case BOOLEAN:
                    case CHAR:
                    case INT:
                    case VOID:
                    case ID: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[2] = jj_gen;
                        break label_2;
                }
                __Member(thisClass.myContext);
            }
            jj_consume_token(R_CURL_BRACKET);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void __Super(ClassToken thisClass, SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __Super
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__SUPER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(EXTENDS);
            Token superClass = jj_consume_token(ID);
            thisClass.superclass = superClass.image;
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Member(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __Member
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__MEMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Token.AccessModifier memberModifier = Token.AccessModifier.Default;
            Boolean isStatic = false;
            label_3: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case PRIVATE:
                    case PROTECTED:
                    case PUBLIC:
                    case STATIC: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[3] = jj_gen;
                        break label_3;
                }
                __Modifier(memberModifier, isStatic, symbolTable);
            }
            __Member_p(memberModifier, isStatic, symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Modifier(Token.AccessModifier accessModifier, Boolean isStatic, SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __Modifier
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__MODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case STATIC: {
                    jj_consume_token(STATIC);
                    if(isStatic) throw new ParseException("Duplicate static keyword");
                    isStatic = true;
                    break;
                }
                case PUBLIC: {
                    jj_consume_token(PUBLIC);
                    if(accessModifier != Token.AccessModifier.Default) throw new ParseException("Conflicting access modifiers");
                    accessModifier = Token.AccessModifier.Public;
                    break;
                }
                case PRIVATE: {
                    jj_consume_token(PRIVATE);
                    if(accessModifier != Token.AccessModifier.Default) throw new ParseException("Conflicting access modifiers");
                    accessModifier = Token.AccessModifier.Private;
                    break;
                }
                case PROTECTED: {
                    jj_consume_token(PROTECTED);
                    if(accessModifier != Token.AccessModifier.Default) throw new ParseException("Conflicting access modifiers");
                    accessModifier = Token.AccessModifier.Protected;
                    break;
                }
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Member_p(Token.AccessModifier accessModifier, Boolean isStatic, SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __Member_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__MEMBER_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case ID: {
                    Token idForMemberID = jj_consume_token(ID);
                    __MemberId(accessModifier, isStatic, idForMemberID, symbolTable);
                    break;
                }
                case BOOLEAN:
                case CHAR:
                case INT:
                case VOID: {
                    Token.ReturnType primitiveType;
                    Integer dimensionCount = 0;
                    __PrimitiveType(primitiveType, symbolTable);
                    __Type_p(dimensionCount, symbolTable);
                    __Member_p_p(accessModifier, isStatic, primitiveType, dimensionCount, symbolTable);
                    break;
                }
                default:
                    jj_la1[5] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __MemberId(Token.AccessModifier accessModifier, Boolean isStatic, Token idForMemberID, SymbolTable symbolTable)//TODO: do this
            throws ParseException {/*
                                    * @bgen(jjtree) __MemberId
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__MEMBERID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case LP: {
                    __FormalArgs(symbolTable);
                    __Block(symbolTable);
                    break;
                }
                case ID:
                case L_STRAIGHT_BRACKET: {
                    __Type_p(symbolTable);
                    __Member_p_p(symbolTable);
                    break;
                }
                default:
                    jj_la1[6] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __FormalArgs(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __FormalArgs
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__FORMALARGS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LP);
            label_4: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case BOOLEAN:
                    case CHAR:
                    case INT:
                    case VOID:
                    case ID: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[7] = jj_gen;
                        break label_4;
                }
                __FormalArgList(symbolTable);
            }
            jj_consume_token(RP);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __FormalArgList(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __FormalArgList
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__FORMALARGLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __FormalArg(symbolTable);
            label_5: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[8] = jj_gen;
                        break label_5;
                }
                jj_consume_token(COMMA);
                __FormalArg(symbolTable);
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __FormalArg(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __FormalArg
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__FORMALARG);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case BOOLEAN:
                case CHAR:
                case INT:
                case VOID: {
                    __Type(symbolTable);
                    __VarDeclaratorId(symbolTable);
                    break;
                }
                case ID: {
                    jj_consume_token(ID);
                    __Type_p(symbolTable);
                    __VarDeclaratorId(symbolTable);
                    break;
                }
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Type(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __Type
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__TYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __PrimitiveType(symbolTable);
            __Type_p(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Type_p(Integer count, SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __Type_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__TYPE_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_6: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case L_STRAIGHT_BRACKET: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[10] = jj_gen;
                        break label_6;
                }
                jj_consume_token(L_STRAIGHT_BRACKET);
                jj_consume_token(R_STRAIGHT_BRACKET);
                count++;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __PrimitiveType(Token.ReturnType returnOrDataType, SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __PrimitiveType
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__PRIMITIVETYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case BOOLEAN: {
                    jj_consume_token(BOOLEAN);
                    break;
                }
                case CHAR: {
                    jj_consume_token(CHAR);
                    break;
                }
                case INT: {
                    jj_consume_token(INT);
                    break;
                }
                case VOID: {
                    jj_consume_token(VOID);
                    break;
                }
                default:
                    jj_la1[11] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __VarDeclaratorId(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __VarDeclaratorId
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__VARDECLARATORID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(ID);
            __Type_p(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Block(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __Block
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__BLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(L_CURL_BRACKET);
            label_7: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case BREAK:
                    case CONTINUE:
                    case IF:
                    case NEW:
                    case RETURN:
                    case SUPER:
                    case THIS:
                    case WHILE:
                    case BOOLEAN:
                    case CHAR:
                    case INT:
                    case VOID:
                    case NULL_LITERAL:
                    case ID:
                    case INT_LITERAL:
                    case CHAR_LITERAL:
                    case STRING_LITERAL:
                    case BOOLEAN_LITERAL:
                    case LP:
                    case L_CURL_BRACKET:
                    case SEMICOLON:
                    case NOT:
                    case PLUS:
                    case MINUS: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[12] = jj_gen;
                        break label_7;
                }
                __Statement(symbolTable);
            }
            jj_consume_token(R_CURL_BRACKET);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Statement(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __Statement
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__STATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case SEMICOLON: {
                    jj_consume_token(SEMICOLON);
                    break;
                }
                default:
                    jj_la1[15] = jj_gen;
                    if (jj_2_1(3)) {
                        __Expression(symbolTable);
                        jj_consume_token(SEMICOLON);
                    } else {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                        {
                            case BOOLEAN:
                            case CHAR:
                            case INT:
                            case VOID: {
                                __Type(symbolTable);
                                __VarDeclaratorList(symbolTable);
                                jj_consume_token(SEMICOLON);
                                break;
                            }
                            default:
                                jj_la1[16] = jj_gen;
                                if (jj_2_2(2)) {
                                    jj_consume_token(ID);
                                    __Type_p(symbolTable);
                                    __VarDeclaratorList(symbolTable);
                                    jj_consume_token(SEMICOLON);
                                } else {
                                    switch ((jj_ntk == -1) ? jj_ntk_f()
                                            : jj_ntk)
                                    {
                                        case IF: {
                                            jj_consume_token(IF);
                                            jj_consume_token(LP);
                                            __Expression(symbolTable);
                                            jj_consume_token(RP);
                                            __Statement(symbolTable);
                                            switch ((jj_ntk == -1) ? jj_ntk_f()
                                                    : jj_ntk)
                                            {
                                                case ELSE: {
                                                    jj_consume_token(ELSE);
                                                    __Statement(symbolTable);
                                                    break;
                                                }
                                                default:
                                                    jj_la1[13] = jj_gen;
                                                    ;
                                            }
                                            break;
                                        }
                                        case WHILE: {
                                            jj_consume_token(WHILE);
                                            jj_consume_token(LP);
                                            __Expression(symbolTable);
                                            jj_consume_token(RP);
                                            __Statement(symbolTable);
                                            break;
                                        }
                                        case RETURN: {
                                            jj_consume_token(RETURN);
                                            switch ((jj_ntk == -1) ? jj_ntk_f()
                                                    : jj_ntk)
                                            {
                                                case NEW:
                                                case SUPER:
                                                case THIS:
                                                case NULL_LITERAL:
                                                case ID:
                                                case INT_LITERAL:
                                                case CHAR_LITERAL:
                                                case STRING_LITERAL:
                                                case BOOLEAN_LITERAL:
                                                case LP:
                                                case NOT:
                                                case PLUS:
                                                case MINUS: {
                                                    __Expression(symbolTable);
                                                    break;
                                                }
                                                default:
                                                    jj_la1[14] = jj_gen;
                                                    ;
                                            }
                                            jj_consume_token(SEMICOLON);
                                            break;
                                        }
                                        case CONTINUE: {
                                            jj_consume_token(CONTINUE);
                                            jj_consume_token(SEMICOLON);
                                            break;
                                        }
                                        case BREAK: {
                                            jj_consume_token(BREAK);
                                            jj_consume_token(SEMICOLON);
                                            break;
                                        }
                                        case L_CURL_BRACKET: {
                                            __Block(symbolTable);
                                            break;
                                        }
                                        default:
                                            jj_la1[17] = jj_gen;
                                            jj_consume_token(-1);
                                            throw new ParseException();
                                    }
                                }
                        }
                    }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __VarDeclaratorList(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen ( jjtree ) __VarDeclaratorList
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__VARDECLARATORLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __VarDeclarator(symbolTable);
            label_8: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[18] = jj_gen;
                        break label_8;
                }
                jj_consume_token(COMMA);
                __VarDeclarator(symbolTable);
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __VarDeclaratorListPreId(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @ bgen ( jjtree ) __VarDeclaratorListPreId
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__VARDECLARATORLISTPREID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __VarDeclaratorPreId(symbolTable);
            label_9: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[19] = jj_gen;
                        break label_9;
                }
                jj_consume_token(COMMA);
                __VarDeclarator(symbolTable);
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __VarDeclarator(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __VarDeclarator
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__VARDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __VarDeclaratorId(symbolTable);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case EQ: {
                    jj_consume_token(EQ);
                    __Expression(symbolTable);
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __VarDeclaratorPreId(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen ( jjtree ) __VarDeclaratorPreId
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__VARDECLARATORPREID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __Type_p(symbolTable);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case EQ: {
                    jj_consume_token(EQ);
                    __Expression(symbolTable);
                    break;
                }
                default:
                    jj_la1[21] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Expression(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __Expression
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __Expression_p(symbolTable);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case EQ: {
                    __ExpressionA_p(symbolTable);
                    break;
                }
                default:
                    jj_la1[22] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Expression_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __Expression_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __Expression_p_p(symbolTable);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case DBL_HOR_BAR: {
                    __ExpressionA_p_p(symbolTable);
                    break;
                }
                default:
                    jj_la1[23] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Expression_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __Expression_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __Expression_p_p_p(symbolTable);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case ANDAND: {
                    __ExpressionA_p_p_p(symbolTable);
                    break;
                }
                default:
                    jj_la1[24] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Expression_p_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen ( jjtree ) __Expression_p_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __Expression_p_p_p_p(symbolTable);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case EQEQ:
                case NEQ: {
                    __ExpressionA_p_p_p_p(symbolTable);
                    break;
                }
                default:
                    jj_la1[25] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Expression_p_p_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen ( jjtree ) __Expression_p_p_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __Expression_p_p_p_p_p(symbolTable);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case GT:
                case LT:
                case GTE:
                case LTE: {
                    __ExpressionA_p_p_p_p_p(symbolTable);
                    break;
                }
                default:
                    jj_la1[26] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Expression_p_p_p_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @ bgen ( jjtree ) __Expression_p_p_p_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P_P_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __Expression_p_p_p_p_p_p(symbolTable);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case PLUS:
                case MINUS: {
                    __ExpressionA_p_p_p_p_p_p(symbolTable);
                    break;
                }
                default:
                    jj_la1[27] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Expression_p_p_p_p_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @ bgen ( jjtree ) __Expression_p_p_p_p_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P_P_P_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __Expression_p_p_p_p_p_p_p(symbolTable);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case SLASH:
                case MOD:
                case STAR: {
                    __ExpressionA_p_p_p_p_p_p_p(symbolTable);
                    break;
                }
                default:
                    jj_la1[28] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Expression_p_p_p_p_p_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @ bgen ( jjtree )
                                    * __Expression_p_p_p_p_p_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P_P_P_P_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case NEW:
                case SUPER:
                case THIS:
                case NULL_LITERAL:
                case ID:
                case INT_LITERAL:
                case CHAR_LITERAL:
                case STRING_LITERAL:
                case BOOLEAN_LITERAL:
                case LP: {
                    __Primary(symbolTable);
                    break;
                }
                case NOT:
                case PLUS:
                case MINUS: {
                    __UnaryOp(symbolTable);
                    __Expression(symbolTable);
                    break;
                }
                default:
                    jj_la1[29] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __ExpressionA_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __ExpressionA_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __BinaryOpSeven(symbolTable);
            __Expression(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __ExpressionA_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __ExpressionA_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __BinaryOpSix(symbolTable);
            __Expression(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __ExpressionA_p_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen ( jjtree ) __ExpressionA_p_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __BinaryOpFive(symbolTable);
            __Expression(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __ExpressionA_p_p_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen ( jjtree ) __ExpressionA_p_p_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __BinaryOpFour(symbolTable);
            __Expression(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __ExpressionA_p_p_p_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @ bgen ( jjtree ) __ExpressionA_p_p_p_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P_P_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __BinaryOpThree(symbolTable);
            __Expression(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __ExpressionA_p_p_p_p_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @ bgen ( jjtree )
                                    * __ExpressionA_p_p_p_p_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P_P_P_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __BinaryOpTwo(symbolTable);
            __Expression(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __ExpressionA_p_p_p_p_p_p_p(SymbolTable symbolTable)
            throws ParseException {/* @bgen(jjtree) __ExpressionA_p_p_p_p_p_p_p */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P_P_P_P_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __BinaryOpOne(symbolTable);
            __Expression(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __BinaryOpSeven(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __BinaryOpSeven
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPSEVEN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(EQ);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __BinaryOpSix(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __BinaryOpSix
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPSIX);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(DBL_HOR_BAR);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __BinaryOpFive(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __BinaryOpFive
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPFIVE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(ANDAND);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __BinaryOpFour(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __BinaryOpFour
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPFOUR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case NEQ: {
                    jj_consume_token(NEQ);
                    break;
                }
                case EQEQ: {
                    jj_consume_token(EQEQ);
                    break;
                }
                default:
                    jj_la1[30] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __BinaryOpThree(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __BinaryOpThree
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPTHREE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case GT: {
                    jj_consume_token(GT);
                    break;
                }
                case LT: {
                    jj_consume_token(LT);
                    break;
                }
                case LTE: {
                    jj_consume_token(LTE);
                    break;
                }
                case GTE: {
                    jj_consume_token(GTE);
                    break;
                }
                default:
                    jj_la1[31] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __BinaryOpTwo(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __BinaryOpTwo
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPTWO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case PLUS: {
                    jj_consume_token(PLUS);
                    break;
                }
                case MINUS: {
                    jj_consume_token(MINUS);
                    break;
                }
                default:
                    jj_la1[32] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __BinaryOpOne(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __BinaryOpOne
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPONE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case STAR: {
                    jj_consume_token(STAR);
                    break;
                }
                case SLASH: {
                    jj_consume_token(SLASH);
                    break;
                }
                case MOD: {
                    jj_consume_token(MOD);
                    break;
                }
                default:
                    jj_la1[33] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __UnaryOp(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __UnaryOp
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__UNARYOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case PLUS: {
                    jj_consume_token(PLUS);
                    break;
                }
                case MINUS: {
                    jj_consume_token(MINUS);
                    break;
                }
                case NOT: {
                    jj_consume_token(NOT);
                    break;
                }
                default:
                    jj_la1[34] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Primary(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __Primary
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__PRIMARY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __PrimaryReal(symbolTable);
            label_10: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case PERIOD: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[35] = jj_gen;
                        break label_10;
                }
                jj_consume_token(PERIOD);
                __PrimaryReal(symbolTable);
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __PrimaryReal(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __PrimaryReal
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__PRIMARYREAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case THIS:
                case NULL_LITERAL:
                case INT_LITERAL:
                case CHAR_LITERAL:
                case STRING_LITERAL:
                case BOOLEAN_LITERAL:
                case LP: {
                    __NonNewArrayExpr(symbolTable);
                    break;
                }
                case ID: {
                    jj_consume_token(ID);
                    __PrimaryId(symbolTable);
                    break;
                }
                case NEW: {
                    jj_consume_token(NEW);
                    __PrimaryNew(symbolTable);
                    break;
                }
                case SUPER: {
                    jj_consume_token(SUPER);
                    break;
                }
                default:
                    jj_la1[36] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __NonNewArrayExpr(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __NonNewArrayExpr
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__NONNEWARRAYEXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case NULL_LITERAL:
                case INT_LITERAL:
                case CHAR_LITERAL:
                case STRING_LITERAL:
                case BOOLEAN_LITERAL: {
                    __Literal(symbolTable);
                    __DimPlus_p(symbolTable);
                    break;
                }
                case THIS: {
                    jj_consume_token(THIS);
                    __DimPlus_p(symbolTable);
                    break;
                }
                case LP: {
                    jj_consume_token(LP);
                    __Expression(symbolTable);
                    jj_consume_token(RP);
                    __DimPlus_p(symbolTable);
                    break;
                }
                default:
                    jj_la1[37] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Literal(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __Literal
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__LITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case NULL_LITERAL: {
                    jj_consume_token(NULL_LITERAL);
                    break;
                }
                case BOOLEAN_LITERAL: {
                    jj_consume_token(BOOLEAN_LITERAL);
                    break;
                }
                case INT_LITERAL: {
                    jj_consume_token(INT_LITERAL);
                    break;
                }
                case CHAR_LITERAL: {
                    jj_consume_token(CHAR_LITERAL);
                    break;
                }
                case STRING_LITERAL: {
                    jj_consume_token(STRING_LITERAL);
                    break;
                }
                default:
                    jj_la1[38] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __DimPlus_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __DimPlus_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__DIMPLUS_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_11: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case L_STRAIGHT_BRACKET: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[39] = jj_gen;
                        break label_11;
                }
                __Dimension(symbolTable);
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Dimension(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __Dimension
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__DIMENSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(L_STRAIGHT_BRACKET);
            __Expression(symbolTable);
            jj_consume_token(R_STRAIGHT_BRACKET);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __PrimaryId(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __PrimaryId
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__PRIMARYID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case LP: {
                    __ActualArgs(symbolTable);
                    break;
                }
                default:
                    jj_la1[40] = jj_gen;
                    ;
            }
            __DimPlus_p(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __ActualArgs(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __ActualArgs
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__ACTUALARGS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LP);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case NEW:
                case SUPER:
                case THIS:
                case NULL_LITERAL:
                case ID:
                case INT_LITERAL:
                case CHAR_LITERAL:
                case STRING_LITERAL:
                case BOOLEAN_LITERAL:
                case LP:
                case NOT:
                case PLUS:
                case MINUS: {
                    __ExprList(symbolTable);
                    break;
                }
                default:
                    jj_la1[41] = jj_gen;
                    ;
            }
            jj_consume_token(RP);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __ExprList(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __ExprList
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__EXPRLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __Expression(symbolTable);
            label_12: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[42] = jj_gen;
                        break label_12;
                }
                jj_consume_token(COMMA);
                __Expression(symbolTable);
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __PrimaryNew(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __PrimaryNew
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__PRIMARYNEW);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case ID: {
                    jj_consume_token(ID);
                    __ActualDim(symbolTable);
                    break;
                }
                case BOOLEAN:
                case CHAR:
                case INT:
                case VOID: {
                    __PrimitiveType(symbolTable);
                    __DimPlus(symbolTable);
                    break;
                }
                default:
                    jj_la1[43] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __ActualDim(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __ActualDim
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__ACTUALDIM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case L_STRAIGHT_BRACKET: {
                    __DimPlus(symbolTable);
                    break;
                }
                case LP: {
                    __ActualArgs(symbolTable);
                    break;
                }
                default:
                    jj_la1[44] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __DimPlus(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __DimPlus
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__DIMPLUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __Dimension(symbolTable);
            __DimPlus_p(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Member_p_p(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree ) __Member_p_p
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__MEMBER_P_P);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(ID);
            __Member_p_pPreId(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Member_p_pPreId(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __Member_p_pPreId
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__MEMBER_P_PPREID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
            {
                case L_STRAIGHT_BRACKET:
                case SEMICOLON:
                case COMMA:
                case EQ: {
                    __Field(symbolTable);
                    break;
                }
                case LP: {
                    __MethodCtorCombo(symbolTable);
                    break;
                }
                default:
                    jj_la1[45] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __Field(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen(jjtree) __Field
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__FIELD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __VarDeclaratorListPreId(symbolTable);
            jj_consume_token(SEMICOLON);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void __MethodCtorCombo(SymbolTable symbolTable)
            throws ParseException {/*
                                    * @bgen( jjtree ) __MethodCtorCombo
                                    */
        SimpleNode jjtn000 = new SimpleNode(JJT__METHODCTORCOMBO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            __FormalArgs(symbolTable);
            __Block(symbolTable);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    static private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    static private boolean jj_3_2() {
        if (jj_scan_token(ID)) return true;
        if (jj_3R_14()) return true;
        if (jj_3R_15()) return true;
        return false;
    }

    static private boolean jj_3R_23() {
        if (jj_scan_token(ID)) return true;
        return false;
    }

    static private boolean jj_3_1() {
        if (jj_3R_13()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    static private boolean jj_3R_70() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(27)) {
            jj_scanpos = xsp;
            if (jj_scan_token(28)) {
                jj_scanpos = xsp;
                if (jj_scan_token(29)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(30)) return true;
                }
            }
        }
        return false;
    }

    static private boolean jj_3R_14() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_18()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    static private boolean jj_3R_18() {
        if (jj_scan_token(L_STRAIGHT_BRACKET)) return true;
        return false;
    }

    static private boolean jj_3R_75() {
        if (jj_3R_67()) return true;
        return false;
    }

    static private boolean jj_3R_69() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_74()) {
            jj_scanpos = xsp;
            if (jj_3R_75()) return true;
        }
        return false;
    }

    static private boolean jj_3R_74() {
        if (jj_3R_71()) return true;
        return false;
    }

    static private boolean jj_3R_72() {
        if (jj_3R_76()) return true;
        return false;
    }

    static private boolean jj_3R_65() {
        if (jj_3R_70()) return true;
        if (jj_3R_71()) return true;
        return false;
    }

    static private boolean jj_3R_58() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_64()) {
            jj_scanpos = xsp;
            if (jj_3R_65()) return true;
        }
        return false;
    }

    static private boolean jj_3R_71() {
        if (jj_3R_73()) return true;
        return false;
    }

    static private boolean jj_3R_64() {
        if (jj_scan_token(ID)) return true;
        if (jj_3R_69()) return true;
        return false;
    }

    static private boolean jj_3R_67() {
        if (jj_scan_token(LP)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_72()) jj_scanpos = xsp;
        if (jj_scan_token(RP)) return true;
        return false;
    }

    static private boolean jj_3R_76() {
        if (jj_3R_13()) return true;
        return false;
    }

    static private boolean jj_3R_62() {
        if (jj_3R_67()) return true;
        return false;
    }

    static private boolean jj_3R_57() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_62()) jj_scanpos = xsp;
        if (jj_3R_63()) return true;
        return false;
    }

    static private boolean jj_3R_73() {
        if (jj_scan_token(L_STRAIGHT_BRACKET)) return true;
        if (jj_3R_13()) return true;
        return false;
    }

    static private boolean jj_3R_52() {
        if (jj_scan_token(PERIOD)) return true;
        if (jj_3R_51()) return true;
        return false;
    }

    static private boolean jj_3R_41() {
        if (jj_3R_46()) return true;
        return false;
    }

    static private boolean jj_3R_68() {
        if (jj_3R_73()) return true;
        return false;
    }

    static private boolean jj_3R_63() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_68()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    static private boolean jj_3R_61() {
        if (jj_scan_token(LP)) return true;
        if (jj_3R_13()) return true;
        if (jj_scan_token(RP)) return true;
        return false;
    }

    static private boolean jj_3R_60() {
        if (jj_scan_token(THIS)) return true;
        if (jj_3R_63()) return true;
        return false;
    }

    static private boolean jj_3R_56() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_59()) {
            jj_scanpos = xsp;
            if (jj_3R_60()) {
                jj_scanpos = xsp;
                if (jj_3R_61()) return true;
            }
        }
        return false;
    }

    static private boolean jj_3R_59() {
        if (jj_3R_66()) return true;
        if (jj_3R_63()) return true;
        return false;
    }

    static private boolean jj_3R_37() {
        if (jj_3R_42()) return true;
        return false;
    }

    static private boolean jj_3R_66() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(68)) {
            jj_scanpos = xsp;
            if (jj_scan_token(80)) {
                jj_scanpos = xsp;
                if (jj_scan_token(75)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(78)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(79)) return true;
                    }
                }
            }
        }
        return false;
    }

    static private boolean jj_3R_51() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_53()) {
            jj_scanpos = xsp;
            if (jj_3R_54()) {
                jj_scanpos = xsp;
                if (jj_3R_55()) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(24)) return true;
                }
            }
        }
        return false;
    }

    static private boolean jj_3R_33() {
        if (jj_3R_38()) return true;
        return false;
    }

    static private boolean jj_3R_53() {
        if (jj_3R_56()) return true;
        return false;
    }

    static private boolean jj_3R_55() {
        if (jj_scan_token(NEW)) return true;
        if (jj_3R_58()) return true;
        return false;
    }

    static private boolean jj_3R_54() {
        if (jj_scan_token(ID)) return true;
        if (jj_3R_57()) return true;
        return false;
    }

    static private boolean jj_3R_29() {
        if (jj_3R_34()) return true;
        return false;
    }

    static private boolean jj_3R_48() {
        if (jj_3R_51()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_52()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    static private boolean jj_3R_50() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(105)) {
            jj_scanpos = xsp;
            if (jj_scan_token(99)) {
                jj_scanpos = xsp;
                if (jj_scan_token(102)) return true;
            }
        }
        return false;
    }

    static private boolean jj_3R_46() {
        if (jj_3R_50()) return true;
        if (jj_3R_13()) return true;
        return false;
    }

    static private boolean jj_3R_49() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(103)) {
            jj_scanpos = xsp;
            if (jj_scan_token(104)) {
                jj_scanpos = xsp;
                if (jj_scan_token(93)) return true;
            }
        }
        return false;
    }

    static private boolean jj_3R_47() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(103)) {
            jj_scanpos = xsp;
            if (jj_scan_token(104)) return true;
        }
        return false;
    }

    static private boolean jj_3R_43() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(91)) {
            jj_scanpos = xsp;
            if (jj_scan_token(92)) {
                jj_scanpos = xsp;
                if (jj_scan_token(96)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(95)) return true;
                }
            }
        }
        return false;
    }

    static private boolean jj_3R_25() {
        if (jj_3R_30()) return true;
        return false;
    }

    static private boolean jj_3R_42() {
        if (jj_3R_47()) return true;
        if (jj_3R_13()) return true;
        return false;
    }

    static private boolean jj_3R_38() {
        if (jj_3R_43()) return true;
        if (jj_3R_13()) return true;
        return false;
    }

    static private boolean jj_3R_21() {
        if (jj_3R_26()) return true;
        return false;
    }

    static private boolean jj_3R_39() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(97)) {
            jj_scanpos = xsp;
            if (jj_scan_token(94)) return true;
        }
        return false;
    }

    static private boolean jj_3R_34() {
        if (jj_3R_39()) return true;
        if (jj_3R_13()) return true;
        return false;
    }

    static private boolean jj_3R_35() {
        if (jj_scan_token(ANDAND)) return true;
        return false;
    }

    static private boolean jj_3R_27() {
        if (jj_scan_token(EQ)) return true;
        return false;
    }

    static private boolean jj_3R_31() {
        if (jj_scan_token(DBL_HOR_BAR)) return true;
        return false;
    }

    static private boolean jj_3R_40() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_44()) {
            jj_scanpos = xsp;
            if (jj_3R_45()) return true;
        }
        return false;
    }

    static private boolean jj_3R_45() {
        if (jj_3R_49()) return true;
        if (jj_3R_13()) return true;
        return false;
    }

    static private boolean jj_3R_44() {
        if (jj_3R_48()) return true;
        return false;
    }

    static private boolean jj_3R_30() {
        if (jj_3R_35()) return true;
        if (jj_3R_13()) return true;
        return false;
    }

    static private boolean jj_3R_17() {
        if (jj_3R_22()) return true;
        return false;
    }

    static private boolean jj_3R_36() {
        if (jj_3R_40()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_41()) jj_scanpos = xsp;
        return false;
    }

    static private boolean jj_3R_26() {
        if (jj_3R_31()) return true;
        if (jj_3R_13()) return true;
        return false;
    }

    static private boolean jj_3R_32() {
        if (jj_3R_36()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_37()) jj_scanpos = xsp;
        return false;
    }

    static private boolean jj_3R_22() {
        if (jj_3R_27()) return true;
        if (jj_3R_13()) return true;
        return false;
    }

    static private boolean jj_3R_28() {
        if (jj_3R_32()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_33()) jj_scanpos = xsp;
        return false;
    }

    static private boolean jj_3R_24() {
        if (jj_3R_28()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_29()) jj_scanpos = xsp;
        return false;
    }

    static private boolean jj_3R_20() {
        if (jj_3R_24()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_25()) jj_scanpos = xsp;
        return false;
    }

    static private boolean jj_3R_15() {
        if (jj_3R_19()) return true;
        return false;
    }

    static private boolean jj_3R_16() {
        if (jj_3R_20()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_21()) jj_scanpos = xsp;
        return false;
    }

    static private boolean jj_3R_19() {
        if (jj_3R_23()) return true;
        return false;
    }

    static private boolean jj_3R_13() {
        if (jj_3R_16()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_17()) jj_scanpos = xsp;
        return false;
    }

    static private boolean jj_initialized_once = false;
    /** Generated Token Manager. */
    static public Exp1TokenManager token_source;
    static SimpleCharStream jj_input_stream;
    /** Current token. */
    static public Token token;
    /** Next token. */
    static public Token jj_nt;
    static private int jj_ntk;
    static private Token jj_scanpos, jj_lastpos;
    static private int jj_la;
    static private int jj_gen;
    static final private int[] jj_la1 = new int[46];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;
    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] { 0x2000, 0x10000, 0x78b80000, 0xb80000, 0xb80000,
                0x78000000, 0x0, 0x78000000, 0x0, 0x78000000, 0x0, 0x78000000,
                0x7f465000, 0x8000, 0x3040000, 0x0, 0x78000000, 0x4425000, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3040000,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3040000, 0x2000000, 0x0, 0x0,
                0x0, 0x3040000, 0x0, 0x78000000, 0x0, 0x0, };
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, };
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[] { 0x0, 0x0, 0x400, 0x0, 0x0, 0x400, 0x220400,
                0x400, 0x1000000, 0x400, 0x200000, 0x0, 0x208bcc10, 0x0,
                0x2003cc10, 0x800000, 0x0, 0x80000, 0x1000000, 0x1000000,
                0x4000000, 0x4000000, 0x4000000, 0x0, 0x0, 0x40000000,
                0x98000000, 0x0, 0x0, 0x2003cc10, 0x40000000, 0x98000000, 0x0,
                0x0, 0x20000000, 0x2000000, 0x3cc10, 0x3c810, 0x1c810,
                0x200000, 0x20000, 0x2003cc10, 0x1000000, 0x400, 0x220000,
                0x5a20000, };
    }

    private static void jj_la1_init_3() {
        jj_la1_3 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x180, 0x0, 0x180, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x20, 0x4, 0x2, 0x1, 0x180, 0x248, 0x180, 0x2, 0x1,
                0x180, 0x248, 0x180, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x180, 0x0,
                0x0, 0x0, 0x0, };
    }

    static final private JJCalls[] jj_2_rtns = new JJCalls[2];
    static private boolean jj_rescan = false;
    static private int jj_gc = 0;

    /** Constructor with InputStream. */
    public Exp1(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public Exp1(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out
                    .println("ERROR: Second call to constructor of static parser.  ");
            System.out
                    .println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new Exp1TokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 46; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 46; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public Exp1(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out
                    .println("ERROR: Second call to constructor of static parser. ");
            System.out
                    .println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new Exp1TokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 46; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 46; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public Exp1(Exp1TokenManager tm) {
        if (jj_initialized_once) {
            System.out
                    .println("ERROR: Second call to constructor of static parser. ");
            System.out
                    .println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 46; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(Exp1TokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 46; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error
    {
    }

    static final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    static private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source
                        .getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    /** Get the next Token. */
    static final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    static private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;
    static private int[] jj_lasttokens = new int[100];
    static private int jj_endpos;

    static private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries
                    .iterator(); it.hasNext();) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /** Generate ParseException. */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[128];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 46; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 128; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    static final public void enable_tracing() {
    }

    /** Disable tracing. */
    static final public void disable_tracing() {
    }

    static private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 2; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i)
                        {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    static private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls
    {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
