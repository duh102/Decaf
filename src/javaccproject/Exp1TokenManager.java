package javaccproject;

/* Exp1TokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Exp1TokenManager.java */

/** Token Manager. */
@SuppressWarnings("unused")public class Exp1TokenManager implements Exp1Constants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1e0000002000000L) != 0L)
         {
            jjmatchedKind = 74;
            return 19;
         }
         if ((active0 & 0x80L) != 0L || (active1 & 0x100000800000000L) != 0L)
            return 28;
         if ((active0 & 0xee1ffc7ffdfff000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 74;
            return 1;
         }
         if ((active1 & 0x2000000L) != 0L)
            return 3;
         if ((active0 & 0x1000038000000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 74;
            return 23;
         }
         return -1;
      case 1:
         if ((active0 & 0x80L) != 0L)
            return 26;
         if ((active0 & 0xfe7fff9ffffdf000L) != 0L || (active1 & 0x3fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x6000020000L) != 0L)
            return 1;
         if ((active0 & 0x180000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 1;
            }
            return 18;
         }
         return -1;
      case 2:
         if ((active0 & 0x100220020040000L) != 0L || (active1 & 0x8L) != 0L)
            return 1;
         if ((active0 & 0xfeffdddfdff9f000L) != 0L || (active1 & 0x37L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x8801400352008000L) != 0L || (active1 & 0x14L) != 0L)
            return 1;
         if ((active0 & 0x76febddc8df97000L) != 0L || (active1 & 0x23L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x4064018c05003000L) != 0L || (active1 & 0x22L) != 0L)
            return 1;
         if ((active0 & 0x369abc5088f94000L) != 0L || (active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 4;
            }
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x1048884000e00000L) != 0L)
            return 1;
         if ((active0 & 0x2692351088194000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x2402011008090000L) != 0L)
            return 1;
         if ((active0 & 0x290340080104000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x90340000100000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x200000080004000L) != 0L || (active1 & 0x1L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x80200000100000L) != 0L)
            return 1;
         if ((active0 & 0x10140000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x140000000000L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 37:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L);
      case 38:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000400000000L);
      case 40:
         return jjStopAtPos(0, 81);
      case 41:
         return jjStopAtPos(0, 82);
      case 42:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L);
      case 43:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20200000000000L);
      case 44:
         return jjStopAtPos(0, 88);
      case 45:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40400000000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 89, 3);
      case 47:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x80L, 0x100000000000000L);
      case 58:
         return jjStopAtPos(0, 108);
      case 59:
         return jjStopAtPos(0, 87);
      case 60:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2004000100000000L);
      case 61:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 62:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc018000080000000L);
      case 63:
         return jjStopAtPos(0, 107);
      case 91:
         return jjStopAtPos(0, 85);
      case 92:
         return jjStopAtPos(0, 100);
      case 93:
         return jjStopAtPos(0, 86);
      case 94:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400000108001000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800000e10006000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000038000000000L, 0x20L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x2001000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40003c0020020000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000800000040000L, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000380000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1c000001800000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1e0000002000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000040000000L, 0x8L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 83);
      case 124:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400002000000000L);
      case 125:
         return jjStopAtPos(0, 84);
      case 126:
         return jjStopAtPos(0, 106);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 26);
         break;
      case 43:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 45:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 60:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000000L);
      case 61:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      case 62:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc010000000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x802800600000000L, active1, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000001000440000L, active1, 0x4L);
      case 102:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x64000016000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xa000L, active1, 0x20L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000300020000000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8201424848004000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000181000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000001200000L, active1, 0x12L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x410000100000000L, active1, 0L);
      case 124:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(2, 125);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 126);
         break;
      case 62:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000010802000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0x1L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000046080000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xe010418800004000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000008100000L, active1, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0001000000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 1);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800100280008000L, active1, 0x4L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1001a00500410000L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 1);
         break;
      case 121:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 127);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x600019000001000L, active1, 0x20L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000400000000L, active1, 0L);
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 1);
         break;
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 1);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 1);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 1);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x6000200001010000L, active1, 0x2L);
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000c200000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x60080000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x1L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x800002000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 1);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x8100080904000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000400000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2100000080000L, active1, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x40008100000L, active1, 0L);
      case 104:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xa04000L, active1, 0L);
      case 107:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 1);
         break;
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400014000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 1);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 1);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x3000280080400000L, active1, 0L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 1);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 1);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x88000000L, active1, 0L);
      case 99:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 1);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 1);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 1);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2280000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x11000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000004000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 1);
         break;
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x100080000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 1);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 1);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x80040000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x1L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 1);
         break;
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0L);
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000100000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x90040000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 1);
         break;
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 1);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 44, 1);
         break;
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 1);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 52, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 47;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAdd(1); }
                  break;
               case 23:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAdd(1); }
                  break;
               case 19:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAdd(1); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(7, 8); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 39)
                     { jjAddStates(12, 13); }
                  else if (curChar == 46)
                     { jjCheckNAdd(3); }
                  else if (curChar == 36)
                  {
                     if (kind > 74)
                        kind = 74;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 28:
                  if (curChar == 47)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAddStates(14, 16); }
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 2:
                  if (curChar == 46)
                     { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 5:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(6); }
                  break;
               case 7:
                  if (curChar == 39)
                     { jjAddStates(12, 13); }
                  break;
               case 9:
                  if (curChar == 34)
                     { jjCheckNAdd(10); }
                  break;
               case 10:
                  if (curChar == 39 && kind > 78)
                     kind = 78;
                  break;
               case 11:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     { jjCheckNAdd(10); }
                  break;
               case 12:
               case 14:
                  if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 15:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 16:
                  if (curChar == 34 && kind > 79)
                     kind = 79;
                  break;
               case 25:
                  if (curChar == 47)
                     { jjAddStates(7, 8); }
                  break;
               case 26:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 29:
                  if (curChar != 47)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddStates(14, 16); }
                  break;
               case 30:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddStates(14, 16); }
                  break;
               case 31:
                  if ((0x2400L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 32:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 33:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAdd(35); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 37:
                  if (curChar != 46)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 40:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(41); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(42, 2); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 45:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(46); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                     { jjCheckNAdd(1); }
                  }
                  if (curChar == 117)
                     { jjCheckNAdd(17); }
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                     { jjCheckNAdd(1); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                     { jjCheckNAdd(1); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                     { jjCheckNAdd(1); }
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAdd(1); }
                  break;
               case 4:
                  if (curChar != 69)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjAddStates(17, 18); }
                  break;
               case 8:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x10400010000000L & l) != 0L)
                     { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(10); }
                  break;
               case 13:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x10400010000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 17:
                  if (curChar == 101 && kind > 80)
                     kind = 80;
                  break;
               case 20:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 115)
                     { jjCheckNAdd(17); }
                  break;
               case 22:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 27:
                  if (kind > 6)
                     kind = 6;
                  break;
               case 30:
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(14, 16); }
                  break;
               case 39:
                  if (curChar != 69)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjAddStates(19, 20); }
                  break;
               case 44:
                  if (curChar != 69)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjAddStates(21, 22); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(9, 11); }
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(14, 16); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 47 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x200L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   35, 36, 37, 42, 2, 43, 44, 28, 29, 13, 15, 16, 8, 11, 30, 31, 
   33, 5, 6, 40, 41, 45, 46, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\142\162\145\141\153", "\143\154\141\163\163", "\143\157\156\164\151\156\165\145", 
"\145\154\163\145", "\145\170\164\145\156\144\163", "\151\146", "\156\145\167", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\164\141\164\151\143", "\163\165\160\145\162", "\164\150\151\163", 
"\167\150\151\154\145", "\142\157\157\154\145\141\156", "\143\150\141\162", "\151\156\164", 
"\166\157\151\144", "\141\142\163\164\162\141\143\164", "\142\171\164\145", "\143\141\163\145", 
"\143\141\164\143\150", "\143\157\156\163\164", "\144\145\146\141\165\154\164", "\144\157", 
"\144\157\165\142\154\145", "\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\157\162", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\147\157\164\157", 
"\160\141\143\153\141\147\145", "\163\150\157\162\164", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\171", "\166\157\154\141\164\151\154\145", 
"\142\171\166\141\154\165\145", "\143\141\163\164", "\146\165\164\165\162\145", 
"\147\145\156\145\162\151\143", "\151\156\156\145\162", "\156\157\156\145", 
"\157\160\145\162\141\164\157\162", "\157\165\164\145\162", "\162\145\163\164", "\166\141\162", 
"\156\165\154\154", "\146\154\157\141\164", null, null, null, null, null, null, null, null, null, 
null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", 
"\75", "\76", "\74", "\41", "\75\75", "\76\75", "\74\75", "\41\75", "\46\46", "\57", 
"\134", "\174\174", "\45", "\53", "\55", "\52", "\176", "\77", "\72", "\53\53", 
"\55\55", "\46", "\174", "\136", "\74\74", "\76\76", "\76\76\76", "\53\75", "\55\75", 
"\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Exp1TokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public Exp1TokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 47; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0xffffffffffffec3fL, 0x0L, 
};
static final long[] jjtoSkip = {
   0x73eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x700L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x8c0L, 0x0L, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[47];
    static private final int[] jjstateSet = new int[2 * 47];

    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    
    static protected char curChar;
}
