package javaccproject;

/* Generated By:JJTree&JavaCC: Do not edit this line. Exp1Constants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Exp1Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 9;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int BREAK = 12;
  /** RegularExpression Id. */
  int CLASS = 13;
  /** RegularExpression Id. */
  int CONTINUE = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int EXTENDS = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int NEW = 18;
  /** RegularExpression Id. */
  int PRIVATE = 19;
  /** RegularExpression Id. */
  int PROTECTED = 20;
  /** RegularExpression Id. */
  int PUBLIC = 21;
  /** RegularExpression Id. */
  int RETURN = 22;
  /** RegularExpression Id. */
  int STATIC = 23;
  /** RegularExpression Id. */
  int SUPER = 24;
  /** RegularExpression Id. */
  int THIS = 25;
  /** RegularExpression Id. */
  int WHILE = 26;
  /** RegularExpression Id. */
  int BOOLEAN = 27;
  /** RegularExpression Id. */
  int CHAR = 28;
  /** RegularExpression Id. */
  int INT = 29;
  /** RegularExpression Id. */
  int VOID = 30;
  /** RegularExpression Id. */
  int ABSTRACT = 31;
  /** RegularExpression Id. */
  int _BYTE = 32;
  /** RegularExpression Id. */
  int CASE = 33;
  /** RegularExpression Id. */
  int CATCH = 34;
  /** RegularExpression Id. */
  int CONST = 35;
  /** RegularExpression Id. */
  int DEFAULT_ = 36;
  /** RegularExpression Id. */
  int DO = 37;
  /** RegularExpression Id. */
  int _DOUBLE = 38;
  /** RegularExpression Id. */
  int FINAL = 39;
  /** RegularExpression Id. */
  int FINALLY = 40;
  /** RegularExpression Id. */
  int FOR = 41;
  /** RegularExpression Id. */
  int IMPLEMENTS = 42;
  /** RegularExpression Id. */
  int IMPORT = 43;
  /** RegularExpression Id. */
  int INSTANCEOF = 44;
  /** RegularExpression Id. */
  int INTERFACE = 45;
  /** RegularExpression Id. */
  int _LONG = 46;
  /** RegularExpression Id. */
  int NATIVE = 47;
  /** RegularExpression Id. */
  int GOTO = 48;
  /** RegularExpression Id. */
  int PACKAGE = 49;
  /** RegularExpression Id. */
  int _SHORT = 50;
  /** RegularExpression Id. */
  int SWITCH = 51;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 52;
  /** RegularExpression Id. */
  int THROW = 53;
  /** RegularExpression Id. */
  int THROWS = 54;
  /** RegularExpression Id. */
  int TRANSIENT = 55;
  /** RegularExpression Id. */
  int TRY = 56;
  /** RegularExpression Id. */
  int VOLATILE = 57;
  /** RegularExpression Id. */
  int BYVALUE = 58;
  /** RegularExpression Id. */
  int CAST = 59;
  /** RegularExpression Id. */
  int FUTURE = 60;
  /** RegularExpression Id. */
  int GENERIC = 61;
  /** RegularExpression Id. */
  int INNER = 62;
  /** RegularExpression Id. */
  int NONE = 63;
  /** RegularExpression Id. */
  int OPERATOR = 64;
  /** RegularExpression Id. */
  int OUTER = 65;
  /** RegularExpression Id. */
  int REST = 66;
  /** RegularExpression Id. */
  int VAR = 67;
  /** RegularExpression Id. */
  int NULL_LITERAL = 68;
  /** RegularExpression Id. */
  int FLOAT = 69;
  /** RegularExpression Id. */
  int Let = 70;
  /** RegularExpression Id. */
  int Dig = 71;
  /** RegularExpression Id. */
  int Dollar_Sign = 72;
  /** RegularExpression Id. */
  int Underscore = 73;
  /** RegularExpression Id. */
  int ID = 74;
  /** RegularExpression Id. */
  int INT_LITERAL = 75;
  /** RegularExpression Id. */
  int EXPONENT = 76;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 77;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 78;
  /** RegularExpression Id. */
  int STRING_LITERAL = 79;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 80;
  /** RegularExpression Id. */
  int LP = 81;
  /** RegularExpression Id. */
  int RP = 82;
  /** RegularExpression Id. */
  int L_CURL_BRACKET = 83;
  /** RegularExpression Id. */
  int R_CURL_BRACKET = 84;
  /** RegularExpression Id. */
  int L_STRAIGHT_BRACKET = 85;
  /** RegularExpression Id. */
  int R_STRAIGHT_BRACKET = 86;
  /** RegularExpression Id. */
  int SEMICOLON = 87;
  /** RegularExpression Id. */
  int COMMA = 88;
  /** RegularExpression Id. */
  int PERIOD = 89;
  /** RegularExpression Id. */
  int EQ = 90;
  /** RegularExpression Id. */
  int GT = 91;
  /** RegularExpression Id. */
  int LT = 92;
  /** RegularExpression Id. */
  int NOT = 93;
  /** RegularExpression Id. */
  int EQEQ = 94;
  /** RegularExpression Id. */
  int GTE = 95;
  /** RegularExpression Id. */
  int LTE = 96;
  /** RegularExpression Id. */
  int NEQ = 97;
  /** RegularExpression Id. */
  int ANDAND = 98;
  /** RegularExpression Id. */
  int SLASH = 99;
  /** RegularExpression Id. */
  int BACKSLASH = 100;
  /** RegularExpression Id. */
  int DBL_HOR_BAR = 101;
  /** RegularExpression Id. */
  int MOD = 102;
  /** RegularExpression Id. */
  int PLUS = 103;
  /** RegularExpression Id. */
  int MINUS = 104;
  /** RegularExpression Id. */
  int STAR = 105;
  /** RegularExpression Id. */
  int TILDE = 106;
  /** RegularExpression Id. */
  int QUESTION = 107;
  /** RegularExpression Id. */
  int COLON = 108;
  /** RegularExpression Id. */
  int PLUSPLUS = 109;
  /** RegularExpression Id. */
  int MINUSMINUS = 110;
  /** RegularExpression Id. */
  int AND = 111;
  /** RegularExpression Id. */
  int HOR_BAR = 112;
  /** RegularExpression Id. */
  int CARROT = 113;
  /** RegularExpression Id. */
  int LTLT = 114;
  /** RegularExpression Id. */
  int GTGT = 115;
  /** RegularExpression Id. */
  int GTGTGT = 116;
  /** RegularExpression Id. */
  int PLUS_EQ = 117;
  /** RegularExpression Id. */
  int MINUS_EQ = 118;
  /** RegularExpression Id. */
  int STAR_EQ = 119;
  /** RegularExpression Id. */
  int SLASH_EQ = 120;
  /** RegularExpression Id. */
  int AND_EQ = 121;
  /** RegularExpression Id. */
  int BAR_EQ = 122;
  /** RegularExpression Id. */
  int CARROT_EQ = 123;
  /** RegularExpression Id. */
  int MOD_EQ = 124;
  /** RegularExpression Id. */
  int LTLTEQ = 125;
  /** RegularExpression Id. */
  int GTGTEQ = 126;
  /** RegularExpression Id. */
  int GTGTGTEQ = 127;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 11>",
    "\"break\"",
    "\"class\"",
    "\"continue\"",
    "\"else\"",
    "\"extends\"",
    "\"if\"",
    "\"new\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"super\"",
    "\"this\"",
    "\"while\"",
    "\"boolean\"",
    "\"char\"",
    "\"int\"",
    "\"void\"",
    "\"abstract\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"const\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"final\"",
    "\"finally\"",
    "\"for\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"goto\"",
    "\"package\"",
    "\"short\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"try\"",
    "\"volatile\"",
    "\"byvalue\"",
    "\"cast\"",
    "\"future\"",
    "\"generic\"",
    "\"inner\"",
    "\"none\"",
    "\"operator\"",
    "\"outer\"",
    "\"rest\"",
    "\"var\"",
    "\"null\"",
    "\"float\"",
    "<Let>",
    "<Dig>",
    "\"$\"",
    "\"_\"",
    "<ID>",
    "<INT_LITERAL>",
    "<EXPONENT>",
    "<FLOAT_LITERAL>",
    "<CHAR_LITERAL>",
    "<STRING_LITERAL>",
    "<BOOLEAN_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"==\"",
    "\">=\"",
    "\"<=\"",
    "\"!=\"",
    "\"&&\"",
    "\"/\"",
    "\"\\\\\"",
    "\"||\"",
    "\"%\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"++\"",
    "\"--\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
  };

}
