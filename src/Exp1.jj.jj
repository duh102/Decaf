package javaccproject;

/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Exp1.jj.jj */
/*@egen*/PARSER_BEGIN(Exp1)

public class Exp1/*@bgen(jjtree)*/implements Exp1TreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTExp1State jjtree = new JJTExp1State();

/*@egen*/
    public static void main(String[] args) {
        try {
            if(args.length == 0 || args[0].length() == 0) {
                //stdin, not implemented
                System.err.println("Reading from stdin not implemented");
                return;
            }
            else {
            	if(args[0].split(" ").length == 1) {
            	    //file
            	    new Exp1(new java.io.FileInputStream(args[0])).__Start();
            	} else {
            	    //redirected input
            	    new Exp1(new java.io.StringReader(args[0])).__Start();
            	}
            }
            System.out.println("Syntax is okay");
        } catch (ParseException e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.err.println("Syntax check failed: " + e.getMessage());
        }
        catch (java.io.FileNotFoundException e)
        {
            System.err.printf("File not found: %s\n", args[0]);
        }
    }
}

PARSER_END(Exp1)

//The following is copied from the Java .jj file
/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN : 
{
/*allowed keywords*/
<BREAK: "break"> 
| <CLASS: "class">
| <CONTINUE: "continue">
| <ELSE: "else">
| <EXTENDS: "extends">
| <IF: "if"> 
| <NEW: "new">
| <PRIVATE: "private">
| <PROTECTED: "protected">
| <PUBLIC: "public">
| <RETURN: "return">
| <STATIC: "static">
| <SUPER: "super">
| <THIS: "this">
| <WHILE: "while">

/*primitive allowed types*/
| <BOOLEAN: "boolean">
| <CHAR: "char">
| <INT: "int">
| <VOID: "void">

/*forbidden words*/
| <ABSTRACT: "abstract">
| <_BYTE: "byte">
| <CASE: "case">
| <CATCH: "catch">
| <CONST: "const">
| <DEFAULT_: "default">
| <DO: "do">
| <_DOUBLE: "double">
| <FINAL: "final">
| <FINALLY: "finally">
| <FOR: "for">
| <IMPLEMENTS: "implements">
| <IMPORT: "import">
| <INSTANCEOF: "instanceof">
| <INTERFACE: "interface">
| <_LONG: "long">
| <NATIVE: "native">
| <GOTO: "goto">
| <PACKAGE: "package">
| <_SHORT: "short">
| <SWITCH: "switch">
| <SYNCHRONIZED: "synchronized">
| <THROW: "throw">
| <THROWS: "throws">
| <TRANSIENT: "transient">
| <TRY: "try">
| <VOLATILE: "volatile">
| <BYVALUE: "byvalue">
| <CAST: "cast">
| <FUTURE: "future">
| <GENERIC: "generic">
| <INNER: "inner">
| <NONE: "none">
| <OPERATOR: "operator">
| <OUTER: "outer">
| <REST: "rest">
| <VAR: "var">

/*other literals*/
| <NULL_LITERAL: "null">

/*forbidden primitive types*/
| <FLOAT: "float">

/*identifiers*/
| <#Let: (["a"-"z","A"-"Z"])>
| <#Dig: ["0"-"9"]>
| <#Dollar_Sign: "$">
| <#Underscore: "_">
| <ID: (<Let>|<Dollar_Sign>|<Underscore>)(<Let>|<Dig>|<Dollar_Sign>|<Underscore>)*>

/*number literals*/
| <INT_LITERAL: (["0"-"9"])+> 
| <#EXPONENT :   "E"("+"|"-")?(["0"-"9"])*>
| <FLOAT_LITERAL :  ((["0"-"9"])+"."(["0"-"9"])*(<EXPONENT>)? | 
            (["0"-"9"])*"."(["0"-"9"])+(<EXPONENT>)? |
            (["0"-"9"])+(<EXPONENT>)?)>

/*other literals*/
| <CHAR_LITERAL: "'" (("\\" ("\\" | "n" | "t" | "\""))|(~["\\","\n","'"])) "'">
| <STRING_LITERAL: "\"" (("\\" ("\\" | "n" | "t" | "\""))|(~["\\","\n" ,"\""])|" ")* "\"">
| <BOOLEAN_LITERAL: "true" | "false">

/*decaf punctuation*/
| <LP: "(">
| <RP: ")"> 
| <L_CURL_BRACKET: "{">
| <R_CURL_BRACKET: "}">
| <L_STRAIGHT_BRACKET: "[">
| <R_STRAIGHT_BRACKET: "]">
| <SEMICOLON: ";">
| <COMMA: ",">
| <PERIOD: ".">

/*operators*/
| <EQ: "=">
| <GT: ">">
| <LT: "<">
| <NOT: "!">
| <EQEQ: "==">
| <GTE: ">=">
| <LTE: "<=">
| <NEQ: "!=">
| <ANDAND: "&&"> 
| <SLASH: "/">
| <BACKSLASH: "\\">
| <DBL_HOR_BAR: "||">
| <MOD: "%">
| <PLUS: "+"> 
| <MINUS: "-">
| <STAR: "*"> 

/*unsupported operators*/
| <TILDE: "~">
| <QUESTION: "?">
| <COLON: ":">
| <PLUSPLUS: "++">
| <MINUSMINUS: "--">
| <AND: "&">
| <HOR_BAR: "|">
| <CARROT: "^">
| <LTLT: "<<">
| <GTGT: ">>">
| <GTGTGT: ">>>">
| <PLUS_EQ: "+=">
| <MINUS_EQ: "-=">
| <STAR_EQ: "*=">
| <SLASH_EQ: "/=">
| <AND_EQ: "&=">
| <BAR_EQ: "|=">
| <CARROT_EQ: "^=">
| <MOD_EQ: "%=">
| <LTLTEQ: "<<=">
| <GTGTEQ: ">>=">
| <GTGTGTEQ: ">>>=">
}

/* _p denotes the ' character from the grammar
 * all methods start with two underscores to denote that they are methods
 * as opposed to keywords defined above.
 */

void __Start():   {/*@bgen(jjtree) __Start */
  SimpleNode jjtn000 = new SimpleNode(JJT__START);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Start */
                       try {
/*@egen*/ (__Class())+ <EOF>/*@bgen(jjtree)*/
                       } catch (Throwable jjte000) {
                         if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           throw (RuntimeException)jjte000;
                         }
                         if (jjte000 instanceof ParseException) {
                           throw (ParseException)jjte000;
                         }
                         throw (Error)jjte000;
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/ }
void __Class(): {/*@bgen(jjtree) __Class */
  SimpleNode jjtn000 = new SimpleNode(JJT__CLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Class */
                     try {
/*@egen*/ <CLASS> <ID> (__Super())? <L_CURL_BRACKET> (__Member())* <R_CURL_BRACKET>/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/}
void __Super(): {/*@bgen(jjtree) __Super */
  SimpleNode jjtn000 = new SimpleNode(JJT__SUPER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Super */
                     try {
/*@egen*/ <EXTENDS> <ID>/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/ }
void __Member(): {/*@bgen(jjtree) __Member */
  SimpleNode jjtn000 = new SimpleNode(JJT__MEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Member */
                      try {
/*@egen*/ (__Modifier())* __Member_p()/*@bgen(jjtree)*/
                      } catch (Throwable jjte000) {
                        if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          throw (RuntimeException)jjte000;
                        }
                        if (jjte000 instanceof ParseException) {
                          throw (ParseException)jjte000;
                        }
                        throw (Error)jjte000;
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/ }
void __Modifier(): {/*@bgen(jjtree) __Modifier */
  SimpleNode jjtn000 = new SimpleNode(JJT__MODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Modifier */
                        try {
/*@egen*/ <STATIC> | 
                        <PUBLIC> | 
                        <PRIVATE> | 
                        <PROTECTED>/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/ }
void __Member_p(): {/*@bgen(jjtree) __Member_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__MEMBER_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Member_p */
                        try {
/*@egen*/ <ID> __MemberId() | 
                        __PrimitiveType() __Type_p() __Member_p_p()/*@bgen(jjtree)*/
                        } catch (Throwable jjte000) {
                          if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            throw (RuntimeException)jjte000;
                          }
                          if (jjte000 instanceof ParseException) {
                            throw (ParseException)jjte000;
                          }
                          throw (Error)jjte000;
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/}
void __MemberId(): {/*@bgen(jjtree) __MemberId */
  SimpleNode jjtn000 = new SimpleNode(JJT__MEMBERID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __MemberId */
                        try {
/*@egen*/ __FormalArgs() __Block() | 
                        __Type_p() __Member_p_p()/*@bgen(jjtree)*/
                        } catch (Throwable jjte000) {
                          if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            throw (RuntimeException)jjte000;
                          }
                          if (jjte000 instanceof ParseException) {
                            throw (ParseException)jjte000;
                          }
                          throw (Error)jjte000;
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/}
void __FormalArgs(): {/*@bgen(jjtree) __FormalArgs */
  SimpleNode jjtn000 = new SimpleNode(JJT__FORMALARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __FormalArgs */
                          try {
/*@egen*/ <LP> (__FormalArgList())* <RP>/*@bgen(jjtree)*/
                          } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              throw (RuntimeException)jjte000;
                            }
                            if (jjte000 instanceof ParseException) {
                              throw (ParseException)jjte000;
                            }
                            throw (Error)jjte000;
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
                          }
/*@egen*/ }
void __FormalArgList(): {/*@bgen(jjtree) __FormalArgList */
  SimpleNode jjtn000 = new SimpleNode(JJT__FORMALARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __FormalArgList */
                             try {
/*@egen*/ __FormalArg() (<COMMA> __FormalArg())*/*@bgen(jjtree)*/
                             } catch (Throwable jjte000) {
                               if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte000;
                               }
                               if (jjte000 instanceof ParseException) {
                                 throw (ParseException)jjte000;
                               }
                               throw (Error)jjte000;
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/ }
void __FormalArg(): {/*@bgen(jjtree) __FormalArg */
  SimpleNode jjtn000 = new SimpleNode(JJT__FORMALARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __FormalArg */
                         try {
/*@egen*/ __Type() __VarDeclaratorId() | <ID> __Type_p() __VarDeclaratorId()/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/}
void __Type(): {/*@bgen(jjtree) __Type */
  SimpleNode jjtn000 = new SimpleNode(JJT__TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Type */
                    try {
/*@egen*/ __PrimitiveType() __Type_p()/*@bgen(jjtree)*/
                    } catch (Throwable jjte000) {
                      if (jjtc000) {
                        jjtree.clearNodeScope(jjtn000);
                        jjtc000 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte000 instanceof RuntimeException) {
                        throw (RuntimeException)jjte000;
                      }
                      if (jjte000 instanceof ParseException) {
                        throw (ParseException)jjte000;
                      }
                      throw (Error)jjte000;
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
                    }
/*@egen*/ }
void __Type_p(): {/*@bgen(jjtree) __Type_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__TYPE_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Type_p */
                      try {
/*@egen*/ (<L_STRAIGHT_BRACKET><R_STRAIGHT_BRACKET>)*/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/ }
void __PrimitiveType(): {/*@bgen(jjtree) __PrimitiveType */
  SimpleNode jjtn000 = new SimpleNode(JJT__PRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __PrimitiveType */
                                try {
/*@egen*/    <BOOLEAN> |
                                <CHAR> |
                                <INT> |
                                <VOID>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/ }
void __VarDeclaratorId(): {/*@bgen(jjtree) __VarDeclaratorId */
  SimpleNode jjtn000 = new SimpleNode(JJT__VARDECLARATORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __VarDeclaratorId */
                               try {
/*@egen*/ <ID> __Type_p()/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }
void __Block(): {/*@bgen(jjtree) __Block */
  SimpleNode jjtn000 = new SimpleNode(JJT__BLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Block */
                     try {
/*@egen*/ <L_CURL_BRACKET> (__Statement())* <R_CURL_BRACKET>/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/ }
void __Statement(): {/*@bgen(jjtree) __Statement */
  SimpleNode jjtn000 = new SimpleNode(JJT__STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Statement */
                            try {
/*@egen*/    <SEMICOLON> |
                            LOOKAHEAD(3) __Expression() <SEMICOLON> |
                            __Type() __VarDeclaratorList() <SEMICOLON> |
                            LOOKAHEAD(2) <ID> __Type_p() __VarDeclaratorList() <SEMICOLON> |
                            <IF> <LP> __Expression() <RP> __Statement() [ LOOKAHEAD(1) <ELSE> __Statement() ] | 
                            <WHILE> <LP> __Expression() <RP> __Statement() |
                            <RETURN> (__Expression())? <SEMICOLON> |
                            <CONTINUE> <SEMICOLON> |
                            <BREAK> <SEMICOLON> |
                            __Block()/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void __VarDeclaratorList(): {/*@bgen(jjtree) __VarDeclaratorList */
  SimpleNode jjtn000 = new SimpleNode(JJT__VARDECLARATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __VarDeclaratorList */
                                 try {
/*@egen*/ __VarDeclarator() (<COMMA> __VarDeclarator())*/*@bgen(jjtree)*/
                                 } catch (Throwable jjte000) {
                                   if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte000;
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     throw (ParseException)jjte000;
                                   }
                                   throw (Error)jjte000;
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
                                 }
/*@egen*/ }
void __VarDeclaratorListPreId(): {/*@bgen(jjtree) __VarDeclaratorListPreId */
  SimpleNode jjtn000 = new SimpleNode(JJT__VARDECLARATORLISTPREID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __VarDeclaratorListPreId */
                                      try {
/*@egen*/ __VarDeclaratorPreId() (<COMMA> __VarDeclarator())*/*@bgen(jjtree)*/
                                      } catch (Throwable jjte000) {
                                        if (jjtc000) {
                                          jjtree.clearNodeScope(jjtn000);
                                          jjtc000 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte000 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte000;
                                        }
                                        if (jjte000 instanceof ParseException) {
                                          throw (ParseException)jjte000;
                                        }
                                        throw (Error)jjte000;
                                      } finally {
                                        if (jjtc000) {
                                          jjtree.closeNodeScope(jjtn000, true);
                                        }
                                      }
/*@egen*/ }
void __VarDeclarator(): {/*@bgen(jjtree) __VarDeclarator */
  SimpleNode jjtn000 = new SimpleNode(JJT__VARDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __VarDeclarator */
                             try {
/*@egen*/ __VarDeclaratorId() (<EQ> __Expression())?/*@bgen(jjtree)*/
                             } catch (Throwable jjte000) {
                               if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte000;
                               }
                               if (jjte000 instanceof ParseException) {
                                 throw (ParseException)jjte000;
                               }
                               throw (Error)jjte000;
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/ }
void __VarDeclaratorPreId(): {/*@bgen(jjtree) __VarDeclaratorPreId */
  SimpleNode jjtn000 = new SimpleNode(JJT__VARDECLARATORPREID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __VarDeclaratorPreId */
                                  try {
/*@egen*/ __Type_p() (<EQ> __Expression())?/*@bgen(jjtree)*/
                                  } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte000;
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      throw (ParseException)jjte000;
                                    }
                                    throw (Error)jjte000;
                                  } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
                                  }
/*@egen*/ }
void __Expression(): {/*@bgen(jjtree) __Expression */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Expression */
                          try {
/*@egen*/ __Expression_p() [ LOOKAHEAD(1) __ExpressionA_p() ]/*@bgen(jjtree)*/
                          } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              throw (RuntimeException)jjte000;
                            }
                            if (jjte000 instanceof ParseException) {
                              throw (ParseException)jjte000;
                            }
                            throw (Error)jjte000;
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
                          }
/*@egen*/}
void __Expression_p(): {/*@bgen(jjtree) __Expression_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Expression_p */
                            try {
/*@egen*/ __Expression_p_p() [ LOOKAHEAD(1) __ExpressionA_p_p() ]/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/ }
void __Expression_p_p(): {/*@bgen(jjtree) __Expression_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Expression_p_p */
                              try {
/*@egen*/ __Expression_p_p_p() [ LOOKAHEAD(1) __ExpressionA_p_p_p() ]/*@bgen(jjtree)*/
                              } catch (Throwable jjte000) {
                                if (jjtc000) {
                                  jjtree.clearNodeScope(jjtn000);
                                  jjtc000 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte000 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte000;
                                }
                                if (jjte000 instanceof ParseException) {
                                  throw (ParseException)jjte000;
                                }
                                throw (Error)jjte000;
                              } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
                              }
/*@egen*/}
void __Expression_p_p_p(): {/*@bgen(jjtree) __Expression_p_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Expression_p_p_p */
                                try {
/*@egen*/ __Expression_p_p_p_p() [ LOOKAHEAD(1) __ExpressionA_p_p_p_p() ]/*@bgen(jjtree)*/
                                } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte000;
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    throw (ParseException)jjte000;
                                  }
                                  throw (Error)jjte000;
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/ }
void __Expression_p_p_p_p(): {/*@bgen(jjtree) __Expression_p_p_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Expression_p_p_p_p */
                                  try {
/*@egen*/ __Expression_p_p_p_p_p() [ LOOKAHEAD(1) __ExpressionA_p_p_p_p_p() ]/*@bgen(jjtree)*/
                                  } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte000;
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      throw (ParseException)jjte000;
                                    }
                                    throw (Error)jjte000;
                                  } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
                                  }
/*@egen*/ }
void __Expression_p_p_p_p_p(): {/*@bgen(jjtree) __Expression_p_p_p_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P_P_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Expression_p_p_p_p_p */
                                    try {
/*@egen*/ __Expression_p_p_p_p_p_p() [ LOOKAHEAD(1) __ExpressionA_p_p_p_p_p_p() ]/*@bgen(jjtree)*/
                                    } catch (Throwable jjte000) {
                                      if (jjtc000) {
                                        jjtree.clearNodeScope(jjtn000);
                                        jjtc000 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte000 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte000;
                                      }
                                      if (jjte000 instanceof ParseException) {
                                        throw (ParseException)jjte000;
                                      }
                                      throw (Error)jjte000;
                                    } finally {
                                      if (jjtc000) {
                                        jjtree.closeNodeScope(jjtn000, true);
                                      }
                                    }
/*@egen*/ }
void __Expression_p_p_p_p_p_p(): {/*@bgen(jjtree) __Expression_p_p_p_p_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P_P_P_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Expression_p_p_p_p_p_p */
                                      try {
/*@egen*/ __Expression_p_p_p_p_p_p_p() [ LOOKAHEAD(1) __ExpressionA_p_p_p_p_p_p_p() ]/*@bgen(jjtree)*/
                                      } catch (Throwable jjte000) {
                                        if (jjtc000) {
                                          jjtree.clearNodeScope(jjtn000);
                                          jjtc000 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte000 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte000;
                                        }
                                        if (jjte000 instanceof ParseException) {
                                          throw (ParseException)jjte000;
                                        }
                                        throw (Error)jjte000;
                                      } finally {
                                        if (jjtc000) {
                                          jjtree.closeNodeScope(jjtn000, true);
                                        }
                                      }
/*@egen*/ }
void __Expression_p_p_p_p_p_p_p(): {/*@bgen(jjtree) __Expression_p_p_p_p_p_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSION_P_P_P_P_P_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Expression_p_p_p_p_p_p_p */
                                        try {
/*@egen*/ __Primary() |
                                        __UnaryOp() __Expression()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/ }

void __ExpressionA_p(): {/*@bgen(jjtree) __ExpressionA_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __ExpressionA_p */
                             try {
/*@egen*/ __BinaryOpSeven() __Expression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte000) {
                               if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte000;
                               }
                               if (jjte000 instanceof ParseException) {
                                 throw (ParseException)jjte000;
                               }
                               throw (Error)jjte000;
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/ }
void __ExpressionA_p_p(): {/*@bgen(jjtree) __ExpressionA_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __ExpressionA_p_p */
                               try {
/*@egen*/ __BinaryOpSix() __Expression()/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }
void __ExpressionA_p_p_p(): {/*@bgen(jjtree) __ExpressionA_p_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __ExpressionA_p_p_p */
                                 try {
/*@egen*/ __BinaryOpFive() __Expression()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte000) {
                                   if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte000;
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     throw (ParseException)jjte000;
                                   }
                                   throw (Error)jjte000;
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
                                 }
/*@egen*/ }
void __ExpressionA_p_p_p_p(): {/*@bgen(jjtree) __ExpressionA_p_p_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __ExpressionA_p_p_p_p */
                                   try {
/*@egen*/ __BinaryOpFour() __Expression()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte000) {
                                     if (jjtc000) {
                                       jjtree.clearNodeScope(jjtn000);
                                       jjtc000 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte000 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte000;
                                     }
                                     if (jjte000 instanceof ParseException) {
                                       throw (ParseException)jjte000;
                                     }
                                     throw (Error)jjte000;
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void __ExpressionA_p_p_p_p_p(): {/*@bgen(jjtree) __ExpressionA_p_p_p_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P_P_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __ExpressionA_p_p_p_p_p */
                                     try {
/*@egen*/ __BinaryOpThree() __Expression()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte000) {
                                       if (jjtc000) {
                                         jjtree.clearNodeScope(jjtn000);
                                         jjtc000 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte000 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte000;
                                       }
                                       if (jjte000 instanceof ParseException) {
                                         throw (ParseException)jjte000;
                                       }
                                       throw (Error)jjte000;
                                     } finally {
                                       if (jjtc000) {
                                         jjtree.closeNodeScope(jjtn000, true);
                                       }
                                     }
/*@egen*/ }
void __ExpressionA_p_p_p_p_p_p(): {/*@bgen(jjtree) __ExpressionA_p_p_p_p_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P_P_P_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __ExpressionA_p_p_p_p_p_p */
                                       try {
/*@egen*/ __BinaryOpTwo() __Expression()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/ }
void __ExpressionA_p_p_p_p_p_p_p(): {/*@bgen(jjtree) __ExpressionA_p_p_p_p_p_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRESSIONA_P_P_P_P_P_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __ExpressionA_p_p_p_p_p_p_p */
                                         try {
/*@egen*/ __BinaryOpOne() __Expression()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte000) {
                                           if (jjtc000) {
                                             jjtree.clearNodeScope(jjtn000);
                                             jjtc000 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte000 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte000;
                                           }
                                           if (jjte000 instanceof ParseException) {
                                             throw (ParseException)jjte000;
                                           }
                                           throw (Error)jjte000;
                                         } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                           }
                                         }
/*@egen*/ }

void __BinaryOpSeven(): {/*@bgen(jjtree) __BinaryOpSeven */
  SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPSEVEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __BinaryOpSeven */
                             try {
/*@egen*/ <EQ>/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/ }
void __BinaryOpSix(): {/*@bgen(jjtree) __BinaryOpSix */
  SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPSIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __BinaryOpSix */
                            try {
/*@egen*/  <DBL_HOR_BAR>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/ }
void __BinaryOpFive(): {/*@bgen(jjtree) __BinaryOpFive */
  SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPFIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __BinaryOpFive */
                            try {
/*@egen*/ <ANDAND>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/ }
void __BinaryOpFour(): {/*@bgen(jjtree) __BinaryOpFour */
  SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPFOUR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __BinaryOpFour */
                            try {
/*@egen*/ <NEQ> |
                            <EQEQ>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void __BinaryOpThree(): {/*@bgen(jjtree) __BinaryOpThree */
  SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPTHREE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __BinaryOpThree */
                                try {
/*@egen*/    <GT> |
                                <LT> |
                                <LTE> |
                                <GTE>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/}
void __BinaryOpTwo(): {/*@bgen(jjtree) __BinaryOpTwo */
  SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPTWO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __BinaryOpTwo */
                            try {
/*@egen*/  <PLUS> | 
                            <MINUS>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void __BinaryOpOne(): {/*@bgen(jjtree) __BinaryOpOne */
  SimpleNode jjtn000 = new SimpleNode(JJT__BINARYOPONE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __BinaryOpOne */
                            try {
/*@egen*/  <STAR> |
                            <SLASH> |
                            <MOD>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/ }
void __UnaryOp(): {/*@bgen(jjtree) __UnaryOp */
  SimpleNode jjtn000 = new SimpleNode(JJT__UNARYOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __UnaryOp */
                        try {
/*@egen*/  <PLUS> |
                        <MINUS> |
                        <NOT>/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/ }
void __Primary(): {/*@bgen(jjtree) __Primary */
  SimpleNode jjtn000 = new SimpleNode(JJT__PRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Primary */
                       try {
/*@egen*/ __PrimaryReal() (<PERIOD> __PrimaryReal())*/*@bgen(jjtree)*/
                       } catch (Throwable jjte000) {
                         if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           throw (RuntimeException)jjte000;
                         }
                         if (jjte000 instanceof ParseException) {
                           throw (ParseException)jjte000;
                         }
                         throw (Error)jjte000;
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/ }
void __PrimaryReal(): {/*@bgen(jjtree) __PrimaryReal */
  SimpleNode jjtn000 = new SimpleNode(JJT__PRIMARYREAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __PrimaryReal */
                            try {
/*@egen*/  __NonNewArrayExpr() |
                        <ID> __PrimaryId() | 
                        <NEW> __PrimaryNew() |
                        <SUPER>/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void __NonNewArrayExpr(): {/*@bgen(jjtree) __NonNewArrayExpr */
  SimpleNode jjtn000 = new SimpleNode(JJT__NONNEWARRAYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __NonNewArrayExpr */
                                try {
/*@egen*/  __Literal() __DimPlus_p() |
                                <THIS> __DimPlus_p() |
                                <LP> __Expression() <RP> __DimPlus_p()/*@bgen(jjtree)*/
                                } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte000;
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    throw (ParseException)jjte000;
                                  }
                                  throw (Error)jjte000;
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/}
void __Literal(): {/*@bgen(jjtree) __Literal */
  SimpleNode jjtn000 = new SimpleNode(JJT__LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Literal */
                        try {
/*@egen*/  <NULL_LITERAL> |
                        <BOOLEAN_LITERAL> | 
                        <INT_LITERAL> |
                        <CHAR_LITERAL> |
                        <STRING_LITERAL>/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/}
void __DimPlus_p(): {/*@bgen(jjtree) __DimPlus_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__DIMPLUS_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __DimPlus_p */
                         try {
/*@egen*/ (__Dimension())*/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/ }
void __Dimension(): {/*@bgen(jjtree) __Dimension */
  SimpleNode jjtn000 = new SimpleNode(JJT__DIMENSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Dimension */
                         try {
/*@egen*/ <L_STRAIGHT_BRACKET> __Expression() <R_STRAIGHT_BRACKET>/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/ }
void __PrimaryId(): {/*@bgen(jjtree) __PrimaryId */
  SimpleNode jjtn000 = new SimpleNode(JJT__PRIMARYID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __PrimaryId */
                         try {
/*@egen*/ (__ActualArgs())? __DimPlus_p()/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/ }
void __ActualArgs(): {/*@bgen(jjtree) __ActualArgs */
  SimpleNode jjtn000 = new SimpleNode(JJT__ACTUALARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __ActualArgs */
                          try {
/*@egen*/ <LP> (__ExprList())? <RP>/*@bgen(jjtree)*/
                          } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              throw (RuntimeException)jjte000;
                            }
                            if (jjte000 instanceof ParseException) {
                              throw (ParseException)jjte000;
                            }
                            throw (Error)jjte000;
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
                          }
/*@egen*/ }
void __ExprList(): {/*@bgen(jjtree) __ExprList */
  SimpleNode jjtn000 = new SimpleNode(JJT__EXPRLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __ExprList */
                        try {
/*@egen*/ __Expression() (<COMMA> __Expression())*/*@bgen(jjtree)*/
                        } catch (Throwable jjte000) {
                          if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            throw (RuntimeException)jjte000;
                          }
                          if (jjte000 instanceof ParseException) {
                            throw (ParseException)jjte000;
                          }
                          throw (Error)jjte000;
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/ }
void __PrimaryNew(): {/*@bgen(jjtree) __PrimaryNew */
  SimpleNode jjtn000 = new SimpleNode(JJT__PRIMARYNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __PrimaryNew */
                            try {
/*@egen*/   <ID> __ActualDim() |
                            __PrimitiveType() __DimPlus()/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void __ActualDim(): {/*@bgen(jjtree) __ActualDim */
  SimpleNode jjtn000 = new SimpleNode(JJT__ACTUALDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __ActualDim */
                            try {
/*@egen*/    __DimPlus() |
                            __ActualArgs()/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/ }
void __DimPlus(): {/*@bgen(jjtree) __DimPlus */
  SimpleNode jjtn000 = new SimpleNode(JJT__DIMPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __DimPlus */
                       try {
/*@egen*/ __Dimension() __DimPlus_p()/*@bgen(jjtree)*/
                       } catch (Throwable jjte000) {
                         if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           throw (RuntimeException)jjte000;
                         }
                         if (jjte000 instanceof ParseException) {
                           throw (ParseException)jjte000;
                         }
                         throw (Error)jjte000;
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/}

void __Member_p_p(): {/*@bgen(jjtree) __Member_p_p */
  SimpleNode jjtn000 = new SimpleNode(JJT__MEMBER_P_P);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Member_p_p */
                          try {
/*@egen*/ <ID> __Member_p_pPreId()/*@bgen(jjtree)*/
                          } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              throw (RuntimeException)jjte000;
                            }
                            if (jjte000 instanceof ParseException) {
                              throw (ParseException)jjte000;
                            }
                            throw (Error)jjte000;
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
                          }
/*@egen*/ }
void __Member_p_pPreId() : {/*@bgen(jjtree) __Member_p_pPreId */
  SimpleNode jjtn000 = new SimpleNode(JJT__MEMBER_P_PPREID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Member_p_pPreId */
                                try {
/*@egen*/ __Field() |
                                __MethodCtorCombo()/*@bgen(jjtree)*/
                                } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte000;
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    throw (ParseException)jjte000;
                                  }
                                  throw (Error)jjte000;
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/ }
void __Field(): {/*@bgen(jjtree) __Field */
  SimpleNode jjtn000 = new SimpleNode(JJT__FIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __Field */
                     try {
/*@egen*/ __VarDeclaratorListPreId() <SEMICOLON>/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/ }
void __MethodCtorCombo(): {/*@bgen(jjtree) __MethodCtorCombo */
  SimpleNode jjtn000 = new SimpleNode(JJT__METHODCTORCOMBO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) __MethodCtorCombo */
                               try {
/*@egen*/ __FormalArgs() __Block()/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/}